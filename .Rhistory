hello <- function() {
print("Hello, world!")
}
hello()
View(hello)
get_all_countries()
get_all_countries()
df = get_all_countries()
df = get_all_countries()
View(df)
operations = get_all_operations()
library(dtmapi)
operations = get_all_operations()
operations = get_all_operations()
devtools::build()
devtools::check()
operations = get_all_operations()
View(operations)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
check()
library(devtools)
check()
devtools::load_all(".")
---
title: "dtmapi document"
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
plot(1:10)
plot(10:1)
knitr::kable(head(mtcars, 10))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
plot(1:10)
plot(10:1)
knitr::kable(head(mtcars, 10))
devtools::check()
devtools::build()
data = get_idp_admin0_data(CountryName = "Ethiopia")
View(data)
data = get_idp_admin0_data()
devtools::check()
devtools::build()
lt = get_idp_admin1_data()
lt = get_idp_admin1_data(Admin0Pcode = "ETH")
View(lt)
View(lt)
devtools::check()
devtools::build()
df = get_idp_admin2_data(Admin0Pcode = "ETH")
View(df)
df = get_idp_admin2_data(Admin0Pcode = "ETH", FromRoundNumber = "2", ToRoundNumber = "2")
nn = get_all_countries()
View(nn)
kj = get_all_operations()
View(kj)
library(roxygen2)
roxygen2::roxygenise()
devtools::document()
?get_all_countries
?get_all_operations
?get_all_countries
?get_idp_admin0_data
?get_idp_admin1_data
?get_idp_admin2_data
devtools::check()
devtools::build()
get_all_countries()
install.packages("config")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(dtmapi)
get_all_countries()
devtools::load_all(".")
get_all_countries()
library(dtmapi)
get_all_countries()
get_all_countries()
get_all_countries()
exit
clear
get_all_countries()
devtools::load_all(".")
get_all_countries()
devtools::load_all(".")
get_all_countries()
devtools::load_all(".")
get_all_countries()
devtools::check()
get_all_countries()
getdy = get_idp_admin0_data()
getdy = get_idp_admin0_data(CountryName = "Sudan")
View(getdy)
devtools::check()
devtools::check()
getdy = get_idp_admin0_data(CountryName = "Sudan")
View(getdy)
getdy = get_idp_admin0_data(CountryName = "Sudan")
devtools::check()
getdy = get_idp_admin0_data(CountryName = "Sudan")
View(getdy)
t = get_all_countries()
View(t)
?get_all_countries
?get_idp_admin0_data
?get_idp_admin0_data
?get_idp_admin0_data
devtools::document()
?get_idp_admin0_data
devtools::document()
?get_idp_admin0_data
?get_idp_admin0_data
?get_idp_admin0_data
devtools::document()
?get_idp_admin0_data
devtools::document()
?get_idp_admin1_data
devtools::load_all(".")
devtools::check()
devtools::build()
R CMD check --as-cran .
check --as-cran .
CMD check --as-cran .
R
devtools::check()
devtools::build()
devtools::check()
devtools::build()
g = get_idp_admin2_data()
g = get_idp_admin2_data(CountryName = "Ethiopia")
g
devtools::check()
devtools::check()
devtools::use_vignette("introduction")
install.packages("usethis")
library(usethis)
devtools::use_vignette("introduction")
library(usethis)
library(usethis)
usethis::use_vignette("introduction")
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::check()
devtools::check()
get_all_countries()
get_all_operations()
get_idp_admin0_data(Admin0Pcode = "AFG")
get_idp_admin1_data(Admin0Pcode = "ETH")
get_idp_admin2_data(Admin0Pcode = "ETH")
install.packages("testthat")
library(testthat)
test_dir("tests/testthat")
devtools::test()
devtools::document()
devtools::document()
devtools::document()
? get_all_operations
?get_idp_admin0_data
?get_idp_admin0_data
devtools::document()
?get_idp_admin2_data
devtools::build_vignettes()
devtools::build_vignettes()
?get_idp_admin0_data
devtools::build_vignettes()
devtools::build_vignettes()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
?get_all_countries
abc = get_all_countries()
View(abc)
devtools::build()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
library(dtmapi)
install.packages("devtools")
devtools::install_github("Displacement-Tracking-Matrix/dtmapi-R")
devtools::install_github("Displacement-Tracking-Matrix/dtmapi-R")
devtools::install_github("Displacement-Tracking-Matrix/dtmapi-R")
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
install.packages("tinytex")
tinytex::install_tinytex()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::check()
devtools::build()
devtools::check()
# Install released version from CRAN
install.packages("pkgdown")
install.packages("pkgdown")
getwd()
install.packages("pkgdown")
install.packages("devtools")
library(dtmapi)
get_all_countries()
install.packages("devtools")
install.packages("pkgdown")
git push --force
devtools::build_vignettes()
devtools::check()
pkgdown::build_site()
devtools::check()
devtools::build_vignettes()
pkgdown::build_site()
devtools::build()
pkgdown::build_site()
devtools::check()
devtools::build()
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::check()
devtools::check()
devtools::build_vignettes()
devtools::check()
devtools::build_vignettes()
pkgdown::build_site()
pkgdown::build_site()
devtools::check()
devtools::build_vignettes()
pkgdown::build_site()
devtools::check()
pkgdown::build_site()
devtools::check()
devtools::build_vignettes()
pkgdown::build_site()
devtools::check()
devtools::check()
devtools::build_vignettes()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(dtmapi)
install.packages("dtmapi")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::build_vignettes()
devtools::check()
library(dtmapi)
abc <- get_idp_admin0_data(Operation = "abc")
#' @param ToRoundNumber Optional; Ending round number for the data collection range.
#' @return A data frame containing the IDP Admin0 data matching the specified criteria.
#' @export
#' @examples
#' # Fetch IDP data at Admin Level 0
#' idp_admin0_df <- get_idp_admin0_data(CountryName='Ethiopia', FromRoundNumber=1, ToRoundNumber=10)
#' head(idp_admin0_df)
#' @importFrom httr GET status_code content
#' @importFrom jsonlite fromJSON
#' @importFrom config get
get_idp_admin0_data <- function(
Operation = NULL,
CountryName = NULL,
Admin0Pcode = NULL,
FromReportingDate = NULL,
ToReportingDate = NULL,
FromRoundNumber = 0,
ToRoundNumber = 0
) {
# Retrieve the API URL from the configuration file
# Load configuration
api_url <- "https://dtmapi.iom.int/api/idpAdmin0Data/GetAdmin0Datav2"
# Set up query parameters
params <- list(
Operation = Operation,
CountryName = CountryName,
Admin0Pcode = Admin0Pcode,
FromReportingDate = FromReportingDate,
ToReportingDate = ToReportingDate,
FromRoundNumber = FromRoundNumber,
ToRoundNumber = ToRoundNumber
)
tryCatch({
# Send GET request to the API with parameters
response <- GET(api_url, query = params)
# Check if the request was successful
if (status_code(response) != 200) {
stop("Failed to fetch data. Status code: ", status_code(response))
}
# Parse the JSON content
data <- content(response, "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
# Check if the request was successful and extract the result
if (json_data$isSuccess) {
# Return the result as a data frame
return(as.data.frame(json_data$result))
} else {
# Handle API-specific errors
stop("API error: ", json_data$errorMessages[1])
}
}, error = function(e) {
# Handle and report errors
stop("API request failed: ", e$message)
})
}
@importFrom config get
#'
#' @return A data frame containing the list of all countries.
#' @export
#' @examples
#' # Fetch all countries
#' countries_df <- get_all_countries()
#' head(countries_df)
#' @importFrom httr GET status_code content
#' @importFrom jsonlite fromJSON
#' @importFrom config get
get_all_countries <- function() {
tryCatch({
# Retrieve the API URL from the configuration file
api_url <- "https://dtmapi.iom.int/api/Common/GetAllCountryList"
# Send GET request to the API
response <- GET(api_url)
# Check if the request was successful
if (status_code(response) != 200) {
stop("Failed to fetch data. Status code: ", status_code(response))
}
# Parse the JSON content and extract the result as a data frame
data <- content(response, "text")
df <- fromJSON(data, flatten = TRUE)$result
# Return the data frame
return(df)
}, error = function(e) {
# Handle and report errors
stop("API request failed: ", e$message)
})
}
abc <- get_idp_admin0_data(Operation = "abc")
abc <- get_idp_admin0_data(CountryName = )
abc <- get_idp_admin0_data(CountryName = "Ethiopia", FromRoundNumber = 7, ToRoundNumber = 5)
remove.packages("dtmapi")
library(dtmapi)
get_all_countries()
library(dtmapi)
get_all_countries()
remove.packages("dtmapi")
devtools::check()
devtools::check()
devtools::check()
install.packages("httr2")
devtools::check()
devtools::build_vignettes()
devtools::build()
install.packages("magrittr")
install.packages("dplyr")
devtools::build()
install.packages("magrittr")
install.packages("dplyr")
devtools::build()
devtools::build()
install.packages("magrittr")
install.packages("dplyr")
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
install.packages("httr2")
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build()
devtools::install("/Users/bangtranl/Work/dtmapi-r/dtmapi_0.0.1.tar.gz")
library(dtmapi)
install.packages("/Users/bangtranl/Work/dtmapi-r/dtmapi_0.0.1.tar.gz", repos = NULL, type = "source")
library(dtmapi)
abc = get_all_countries()
install.packages("/Users/bangtranl/Work/dtmapi-r/dtmapi_0.0.1.tar.gz")
library(dtmapi)
abc = get_all_countries()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::build()
install.packages("/Users/bangtranl/Work/dtmapi-r/dtmapi_0.0.1.tar.gz")
library(dtmapi)
abc = get_all_countries()
abc
a = get_idp_admin0_data(CountryName = "Ehiopia")
a = get_idp_admin0_data(CountryName = "Ethiopia")
a
a = get_idp_admin1_data(CountryName = "Ethiopia")
View(a)
a = get_idp_admin2_data(CountryName = "Ethiopia", FromRoundNumber = 1, ToRoundNumber = 2)
pkgdown::build_site()
pkgdown::build_site()
devtools::build_vignettes()
pkgdown::build_site()
devtools::check()
devtools::check()
devtools::build()
